import com.google.appengine.task.RunTask

apply plugin: 'gwt'
apply plugin: 'war'
apply plugin: 'appengine'
apply from: '../gradle/database.gradle'
apply from: './src/script/buildProperties.gradle'
apply from: './src/script/instrumentedGwt.gradle'
apply from: './src/script/devServer.gradle'


description = 'ActivityInfo Server'

gwt {
    gwtVersion = project.gwtVersion
    
    minHeapSize = "512M";
    maxHeapSize = "2048M";

    modules 'org.activityinfo.ui.ActivityInfoRelease',
            'org.activityinfo.ui.Embed'
}

appengine {
    downloadSdk = true
}

war {
    archiveName = "activityinfo-b${buildNumber}.war"
    classpath = classpath.filter { file ->
        return !file.name.startsWith('guava-gwt') &&
               !file.name.startsWith('gwt-user')
    }
    exclude("**/*.symbolMap")
}


test {
    systemProperty "testDatabaseName", "testDb"
    systemProperty "testDatabaseUsername", localMySqlUsername
    systemProperty "testDatabasePassword", localMySqlPassword

    testLogging.showStandardStreams = false
}

processResources {
    filter { line ->
        line.replace('$[display.version]', project.version.toString())
            .replace('$[git.commit.id]', commitId)
    }
}

task checkDownloadSize(type: org.activityinfo.gwt.CheckDownloadSizeTask) {
    group = "Verification"
    dependsOn 'compileGwt'
    initialJsDownloadSizeLimit "300kb"
    totalJsDownloadSizeLimit "650kb"
    appCacheDownloadSizeLimit "2000kb"
}

task archive(type: org.activityinfo.gcloud.ArchiveArtifactTask) {
    group = "Delivery Pipeline"
    description = "Builds, verifies, and archives the binary WAR that is used by subsequent stages"
    dependsOn 'war'
    archivePath = war.archivePath
}

task createTargetDir {
    doLast {
        // We still have a few tests that are looking for the target folder
        // created by maven
        project.file('target').mkdirs()
    }
}

project.tasks['test'].dependsOn createTargetDir

dependencies {
    compile project(':model')
    compile project(':services')
    
    // AppEngine
    appengineSdk libraries.appengine.sdk
    compile libraries.appengine.api
    compile libraries.appengine.gcs

    testCompile libraries.appengine.testing
    testCompile libraries.appengine.stubs
    
    // IoC Framework
    compile libraries.guice
    compile libraries.guiceServlet
    
    // Jersey + Rest 
    compile libraries.jersey.server
    compile libraries.jersey.multipart
    compile libraries.jersey.guice
    compile libraries.jersey.json
    
    compile libraries.freemarker
    compile libraries.jackson.geojson
    compile libraries.gson
    
    testCompile libraries.jersey.client

    // Utility libraries
    compile libraries.guava
    compile libraries.commons.fileupload
    compile libraries.commons.io
    compile libraries.bcrypt


    // MySQL Related dependencies
    compile libraries.hibernate.entitymanager
    compile libraries.hibernate.spatial
    compile libraries.hibernate.validator
    compile libraries.liquibase
    compile libraries.jdbc.mysql

    testCompile libraries.jdbc.sqlite
    testCompile libraries.dbunit
    testCompile libraries.c3p0


    compile libraries.jts

    compile libraries.google.apiClient
    

    // GWT User Interface Dependencies
    compile libraries.gxt

    compile libraries.gwt.user
    
    gwt libraries.gwt.dnd
    gwt libraries.gwt.guice
    gwt libraries.gwt.gson
    gwt libraries.gwt.leaflet
    gwt libraries.gwt.gears
    gwt libraries.gwt.guava

    compile libraries.gwt.i18nServer


    compile libraries.rebar.time
    compile libraries.rebar.sync
    compile libraries.rebar.asyncFun
    compile libraries.rebar.appcache
    compile libraries.rebar.sql
    compile libraries.rebar.sync
    
    gwt libraries.rebar.style


    // Report Rendering
    compile libraries.appengine.export.itext
    compile libraries.appengine.export.awt
    compile libraries.appengine.export.ppt
    compile libraries.appengine.export.jcharts
    compile libraries.appengine.export.emf
    compile libraries.prettytime

}

