import com.google.common.base.Charsets
import com.google.common.io.Files
import groovy.json.*

import java.util.zip.GZIPOutputStream

// Check the size of the generated code
// and generally verify the app cache manifest

def webAppDir = new File(project.build.directory, project.build.finalName)

profileModule(webAppDir, "ActivityInfo")


def profileModule(webAppDir, moduleName) {

    // Parse the permutations file, which is output by rebar-appcache and contains
    // a mapping from properties (user.agent, locale) to permutations
    def slurper = new JsonSlurper()
    def moduleDir = new File(webAppDir, moduleName)
    def permutations = slurper.parse(new File(moduleDir, "permutations"))

    // For each permutation, calculate the total size of the appcache and the initial
    // fragment download
    List profiles = new ArrayList()
    for (p in permutations) {
        def profile = [
                strongName           : p.permutation,
                locale               : p.properties["locale"],
                userAgent            : p.properties["user.agent"],
                totalSize            : totalSize(moduleDir, p.permutation),
                initialFragmentSize  : initialJsDownloadSize(moduleDir, p.permutation),
                initialFragmentSizeGz: initialJsDownloadSizeGz(moduleDir, p.permutation)]
    }

    Files.write(JsonOutput.toJson(profiles),
            new File(project.build.directory, "${moduleName}-size.json"),
                Charsets.UTF_8)
}
F
def totalSize(moduleDir, permutation) {
    long size = 0;

    def manifestFile = new File(moduleDir, "${permutation}.appcache")
    def section = null;
    
    manifestFile.eachLine {  line ->
        
        if(line.endsWith(":")) {
            section = line;
        } else if(!line.isEmpty() && section.equals("CACHE:")) {
            
            if(!isDynamic(line)) {
                def file = new File(moduleDir, line.replace("%40", "@"))
                if (!file.exists()) {
                    throw new RuntimeException("AppCache verification failed: ${line} does not exist.");
                }
                size += file.length();
            }
        }
    }
    return size
}

def initialJsDownloadSize(moduleDir, permutation) {

    def js = new File(moduleDir, "${permutation}.cache.html")
    return js.length();
}

def initialJsDownloadSizeGz(moduleDir, permutation) {

    def js = new File(moduleDir, "${permutation}.cache.html")
    def buffer = new ByteArrayOutputStream();
    def gzip = new GZIPOutputStream(buffer);
    gzip.write(js.getBytes())
    gzip.close()
    
    return buffer.size()
}


def isDynamic(String s) {
    // selection script, generated by SelectionServlet
    return s.endsWith(".nocache.js")
}