

dependencies {

    testCompile libraries.junit
    testCompile libraries.guice
    testCompile libraries.jersey.client
    testCompile libraries.jersey.json
    testCompile libraries.cucumber.java
    testCompile libraries.cucumber.junit
    testCompile libraries.cucumber.guice
    testCompile libraries.jsr305
    compile libraries.jdbc.mysql

    testCompile 'org.seleniumhq.selenium:selenium-java:2.43.0'
    testCompile 'com.saucelabs:sauce_junit:2.1.13'
    testCompile 'com.github.detro:phantomjsdriver:1.2.0'
    testCompile 'org.yaml:snakeyaml:1.14'
    testCompile 'org.apache.commons:commons-pool2:2.0'
    testCompile 'joda-time:joda-time:2.5'
    testCompile 'org.littleshoot:littleproxy:1.0.0-beta7'
}

test {
    // Do not run acceptance tests during normal test phase
    exclude "**/*AT.*"
    exclude "**/*Smoke*.*"
}

task acceptanceTest(type: Test) {
    group = "Verification"
    description = 'Runs acceptance test suite'

    // Determine the server against which to test
    if(!project.hasProperty("testUrl")) {
        dependsOn ':server:appengineStartAT'
        finalizedBy ':server:appengineStop'
        systemProperty "test.url", "http://localhost:8080"
        
    } else {
        systemProperty "test.url", project.property("testUrl")
    }
    
    // Use ChromeDriver locally
    systemProperty 'webdriver', 'chrome'
    systemProperty 'webdriver.chrome.silentOutput', 'true'   

    // Keep console output to a minimum
    testLogging.showStandardStreams = false


    // Run only functional tests
    include "**/Functional*AT*"
    scanForTestClasses false
}

task instrumentedAcceptanceTest(type: Test) {
    group = "Verification"
    description = 'Runs acceptance tests against an instrumented server to gather test coverage metrics'

    ext {
        coverageReportDir = project.file("$buildDir/gwtCoverage")
    }

    // Determine the server against which to test
    dependsOn { ':server:appengineStartInstrumentedAT' }
    finalizedBy { ':server:appengineStop' }

    systemProperty "test.url", "http://localhost:8080"
    systemProperty "gwt.coverage.report.dir", coverageReportDir
    systemProperty "databaseName", "activityinfo_at"

    // Keep console output to a minimum
    testLogging.showStandardStreams = false

    // some tests may fail due to the instrumentation process
    ignoreFailures = true

    // Run only UI functional tests
    include "**/Functional*AT.*"

    scanForTestClasses false
}

apply from: './src/script/gwtCoverageReport.gradle'


task acceptanceTestCoverage {
    dependsOn 'instrumentedAcceptanceTest'
    dependsOn 'gwtTestCoverage'
}

task acceptanceTestJacocoReport(type:JacocoReport, dependsOn: 'instrumentedAcceptanceTest') {
    def sourceSets = rootProject.subprojects.findResults { p -> p.sourceSets?.main }

    sourceDirectories = project.files(sourceSets.collect { s -> s.java })
    classDirectories = project.files(sourceSets.collect { s -> s.output.classesDir })
    executionData jacocoAcceptanceDataFile
    
    reports {
        xml.enabled = true
    }
}


task smokeTest(type: Test) {
    description = 'Runs pre-release smoke tests'
    group = "Delivery Pipeline"
    dependsOn 'testClasses'

    include "**/*SmokeTest.*"
    scanForTestClasses false

    if(project.hasProperty("testUrl")) {
        systemProperty "test.url", project.property("testUrl")
    }
}
