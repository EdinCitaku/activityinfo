
apply plugin: 'application'

mainClassName = "org.activityinfo.test.TestMain"


dependencies {


    compile 'org.apache.poi:poi-ooxml:3.12-beta1'
    compile 'org.apache.poi:poi:3.12-beta1'
    
    compile libraries.hamcrest
    compile libraries.junit
    compile libraries.guice
    compile libraries.jersey.client
    compile libraries.jersey.json
    compile libraries.cucumber.java
    compile libraries.cucumber.guice


    compile libraries.jsr305

    compile 'org.seleniumhq.selenium:selenium-java:2.43.0'
    compile 'com.saucelabs:sauce_junit:2.1.13'
    compile 'com.github.detro:phantomjsdriver:1.2.0'
    compile 'org.yaml:snakeyaml:1.14'
    compile 'org.apache.commons:commons-pool2:2.0'
    compile 'joda-time:joda-time:2.5'
    compile 'org.littleshoot:littleproxy:1.0.0-beta7'
    compile 'org.apache.commons:commons-csv:1.1'
    compile 'io.airlift:airline:0.7'
    
    compile libraries.bcrypt
    compile libraries.metrics.core
    compile libraries.jersey.server
    compile libraries.jersey.simpleServer

    compile 'io.appium:java-client:2.2.0'
    
    compile project(':core:model')
    compile project(':i18n')
    compile libraries.gwt.i18nServer
}


task acceptanceTest(type: JavaExec) {
    group = "Verification"
    description = 'Runs acceptance test suite'

    dependsOn 'classes'
    dependsOn ':server:configureDatabase'

    args '--url', project.environment.url
    args '--api'
    args '--ui'
    args '-T', '6'
    args '--outputDir', "$buildDir/test-results"
    args '--retries', '3'

    main = 'org.activityinfo.test.TestMain'
    classpath = sourceSets.test.runtimeClasspath
    workingDir = "$buildDir"
    
    // Determine the server against which to test
    if(project.environment.local) {
        dependsOn ':server:appengineStartAT'
        finalizedBy ':server:appengineStop'
    } 
}


task instrumentedAcceptanceTest(type: JavaExec) {
    group = "Verification"
    description = 'Runs acceptance tests against an instrumented server to gather test coverage metrics'

    ext {
        coverageReportDir = project.file("$buildDir/gwtCoverage")
    }

    // Determine the server against which to test
    dependsOn 'classes'
    dependsOn { ':server:appengineStartInstrumentedAT' }
    finalizedBy { ':server:appengineStop' }

    // some tests may fail due to the instrumentation process
    systemProperty "gwt.coverage.report.dir", coverageReportDir

    main = 'org.activityinfo.test.TestMain'
    classpath = sourceSets.test.runtimeClasspath
    workingDir = "$buildDir"

    args '--url', project.environment.url
    args '--api', '--ui', '--odk'   
    args '--retries', '3'
    args '--webdriver', 'chrome'
    args '--outputDir', "$buildDir/test-results"
}


task acceptanceTestJacocoReport(type:JacocoReport, dependsOn: 'instrumentedAcceptanceTest') {
    def sourceSets = rootProject.subprojects.findResults { p -> p.sourceSets?.main }

    sourceDirectories = project.files(sourceSets.collect { s -> s.java })
    classDirectories = project.files(sourceSets.collect { s -> s.output.classesDir })
    executionData jacocoAcceptanceDataFile

    reports {
        xml.enabled = true
    }
}

task acceptanceTestCoverage(type: org.activityinfo.coverage.MergeCoverageTask) {
    dependsOn 'acceptanceTestJacocoReport'

    gwtCoverageReportsDir = instrumentedAcceptanceTest.coverageReportDir
    jacocoReportFile = acceptanceTestJacocoReport.reports.xml.destination
    outputFile = project.acceptanceDataFile
    
    outputs.upToDateWhen { false }
    
    doFirst {
        if (!project.environment.local) {
            throw new IllegalStateException("${task.name} can only run in a local environment")
        }
    }
}

task capacityTest(type: JavaExec) {
    description = 'Runs capacity tests to verify performance under load'
    main = 'org.activityinfo.test.capacity.CapacityTest'
    dependsOn 'classes', ':server:configureDatabase'
    classpath = sourceSets.test.runtimeClasspath
    workingDir = "$buildDir/capacity"
    
    doFirst {
        workingDir.mkdir()
        systemProperties.putAll(project.environment.systemProperties)
    }
}


task smokeTest(type: Test) {
    description = 'Runs pre-release smoke tests'
    group = "Delivery Pipeline"
    dependsOn 'classes'

    include "**/*SmokeTest.*"

    if(project.hasProperty("testUrl")) {
        systemProperty "test.url", project.property("testUrl")
    }
}

distZip.baseName = "activityinfo-tests"

task archive(type: org.activityinfo.gcloud.ArchiveArtifactTask) {
    group = "Delivery Pipeline"
    description = "Archives the binary test runner that is used by subsequent stages"
    dependsOn 'distZip'
    archivePath = distZip.archivePath
}



tasks.each { task ->
    if(task.name =~ /[aA]cceptanceTest$/) {
        task.configure {

            doFirst {
                systemProperties.putAll(project.environment.systemProperties)
            }
            systemProperty 'webdriver', project.property('webdriver')
            systemProperty 'webdriver.chrome.silentOutput', 'true'

            // When running the tests locally, the test code should start a server to 
            // listen for postmark mail sending requests at the given port
            if (project.environment.local) {
                systemProperty 'postmarkStubPort', project.property('postmarkStubPort')
            }

            if (project.hasProperty('mailinatorApiKey')) {
                systemProperty 'mailinatorApiKey', project.property('mailinatorApiKey')
            }

            if (project.hasProperty("phantomjsPath")) {
                systemProperty "phantomjsPath", project.property("phantomjsPath")
            }
        }
    }
}
